package ie.gmit.sw.ai.nn;

import org.encog.engine.network.activation.ActivationSigmoid;
import org.encog.ml.data.MLDataSet;
import org.encog.ml.data.basic.BasicMLDataSet;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.layers.BasicLayer;

import ie.gmit.sw.ai.GameModel;
import ie.gmit.sw.ai.Scavenge;
import ie.gmit.sw.ai.ScavengerAction;

public class ActionProvider {

	private ScavengerAction scavenge;
	
	public ActionProvider(GameModel model) {
		scavenge = new Scavenge(model);
	}

	int[][] data = { { 1, 1, 1 }, { 1, 1, 2 }, { 1, 1, 3 }, { 1, 1, 4 }, { 1, 1, 5 }, { 1, 1, 6 }, { 1, 1, 7 },
			{ 1, 1, 8 }, { 1, 2, 1 }, { 1, 2, 2 }, { 1, 2, 3 }, { 1, 2, 4 }, { 1, 2, 5 }, { 1, 2, 6 }, { 1, 2, 7 },
			{ 1, 2, 8 }, { 1, 3, 1 }, { 1, 3, 2 }, { 1, 3, 3 }, { 1, 3, 4 }, { 1, 3, 5 }, { 1, 3, 6 }, { 1, 3, 7 },
			{ 1, 3, 8 }, { 1, 4, 1 }, { 1, 4, 2 }, { 1, 4, 3 }, { 1, 4, 4 }, { 1, 4, 5 }, { 1, 4, 6 }, { 1, 4, 7 },
			{ 1, 4, 8 }, { 1, 5, 1 }, { 1, 5, 2 }, { 1, 5, 3 }, { 1, 5, 4 }, { 1, 5, 5 }, { 1, 5, 6 }, { 1, 5, 7 },
			{ 1, 5, 8 },

			{ 2, 1, 1 }, { 2, 1, 2 }, { 2, 1, 3 }, { 2, 1, 4 }, { 2, 1, 5 }, { 2, 1, 6 }, { 2, 1, 7 }, { 2, 1, 8 },
			{ 2, 2, 1 }, { 2, 2, 2 }, { 2, 2, 3 }, { 2, 2, 4 }, { 2, 2, 5 }, { 2, 2, 6 }, { 2, 2, 7 }, { 2, 2, 8 },
			{ 2, 3, 1 }, { 2, 3, 2 }, { 2, 3, 3 }, { 2, 3, 4 }, { 2, 3, 5 }, { 2, 3, 6 }, { 2, 3, 7 }, { 2, 3, 8 },
			{ 2, 4, 1 }, { 2, 4, 2 }, { 2, 4, 3 }, { 2, 4, 4 }, { 2, 4, 5 }, { 2, 4, 6 }, { 2, 4, 7 }, { 2, 4, 8 },
			{ 2, 5, 1 }, { 2, 5, 2 }, { 2, 5, 3 }, { 2, 5, 4 }, { 2, 5, 5 }, { 2, 5, 6 }, { 2, 5, 7 }, { 2, 5, 8 } };

	int[] expected = { 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 1, 1,
			4, 4, 4, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
			1, 1, 1, 1, 4, 4, 2, 2, 2, 2, 2, 2 };

	public ScavengerAction getAction(int nearCharacter, double strength) {
		if (nearCharacter == 0) return scavenge;
		
		System.out.println("[INFO] Creating neural network");
		BasicNetwork network = new BasicNetwork();
		network.addLayer(new BasicLayer(null, true, 4));
		network.addLayer(new BasicLayer(new ActivationSigmoid(), true, 2));
		network.addLayer(new BasicLayer(new ActivationSigmoid(), false, 4));
		network.getStructure().finalizeStructure();
		network.reset();
		
		System.out.println("[INFO] Creating training set");
		MLDataSet trainingSet = new BasicMLDataSet(data, expected);

		return scavenge;
	}

}
