package ie.gmit.sw.ai;

import java.util.LinkedList;

public class PathFinder {
	
	private LinkedList<Node> closed = new LinkedList<Node>();
	// Collections.sort(open)
	private LinkedList<Node> open = new LinkedList<Node>();
	private Node[][] nodes;
	
	private int maxSearchDistance = 50;
	
	public PathFinder(char[][] map) {
		initialiseNodeMap(map);
	}
	
	public Path findPath(int sx, int sy, int tx, int ty) {
		// initialization
		nodes[sx][sy].setCost(0);
		nodes[sx][sy].setDepth(0);
		closed.clear();
		open.clear();
		open.add(nodes[sx][sy]);
		
		nodes[tx][ty].setParent(null);
		
		int maxDepth = 0;
		while((open.size() != 0) && maxDepth < maxSearchDistance) {
			Node current = open.getFirst();
			if (current == nodes[tx][ty]) {
				// found destination node
				break;
			}
			open.remove(current);
		}
		
		return new Path();
	}
	
	private void initialiseNodeMap(char[][] map) {
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				nodes[i][j] = new Node(i, j);
			}
		}
	}
	
	// calculate cost of movement from one pos to another based on heuristic
	private float getCost(int sr, int sc, int tr, int tc) {
		return 0;
	}

}
