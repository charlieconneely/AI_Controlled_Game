package ie.gmit.sw.ai;

import java.util.LinkedList;

public class BFS {
	
	private GameModel model;
	
	public BFS(GameModel model) {
		this.model = model;
	}

	private static class CellBlock {
		int row,col;
		int dist;
		CellBlock prev;
		
		CellBlock(int row, int col, int dist, CellBlock prev) {
			this.row = row;
			this.col = col;
			this.dist = dist;
			this.prev = prev;
		}
		
		public String toString() {
			return "(" + row + "," + col + ")";
		}
	}	
	
	public int[] shortestPath(char[][] grid, int[] start, int[] end) {
		int sRow = start[0], sCol = start[1];
		int dRow = end[0], dCol = end[1];
				
		int m = grid.length;
		int n = grid[0].length;
		
		CellBlock[][] cells = new CellBlock[m][n];
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == ' ') {
					cells[i][j] = new CellBlock(i, j, Integer.MAX_VALUE, null);
				}
 			}
		}
		
		System.out.println("out of for loop");
		
		LinkedList<CellBlock> queue = new LinkedList<>();
		CellBlock src = cells[sRow][sCol];
		src.dist = 0;
		queue.add(src);
		CellBlock dest = null;
		CellBlock p;
		while((p = queue.poll()) != null) {
			System.out.println("Calling");
			// find destination
			if (p.row == dRow && p.col == dCol) {
				dest = p;
				break;
			}
			// move up
			visit(cells, queue, p.row-1, p.col, p);
			// move down
			visit(cells, queue, p.row+1, p.col, p);
			// move left
			visit(cells, queue, p.row, p.col-1, p);
			// move right
			visit(cells, queue, p.row, p.col+1, p);
		}
		
		System.out.println("done visiting");
		
		if (dest == null) {
			queue.clear();
			return null;
		} else {
			LinkedList<CellBlock> path = new LinkedList<>();
			p = dest;
			do {
				path.addFirst(p);
			} while((p = p.prev) != null);
			CellBlock lastBlock = path.pop();
			int[] firstStep = {lastBlock.row, lastBlock.col};
			System.out.println(path);
			path.clear();
			queue.clear();
			return firstStep;
		}
	}

	public void visit(CellBlock[][] cells, LinkedList<CellBlock> queue, int row, int col, CellBlock parent) {
		if (row > model.size() - 1 || col > model.size() - 1 || model.get(row, col) != ' ') {
			return;
		}
		
		int dist = parent.dist + 1;
		CellBlock p = cells[row][col];
		if (dist < p.dist) {
			p.dist = dist;
			p.prev = parent;
			queue.add(p);
		}
	}
	
	public int[] getPlayerPos() { 
		char[][] m = model.getModel();
		for (int row = 0; row < m.length; row++){
			for (int col = 0; col < m[row].length - 1; col++){
				if (m[row][col] == '1') {
					int[] pos = {row, col};
					return pos;
				}
			}
		}
		int[] pos = {0, 0};
		return pos;
	}
}
