package ie.gmit.sw.ai;

import org.encog.Encog;
import org.encog.engine.network.activation.ActivationSigmoid;
import org.encog.ml.data.MLDataSet;
import org.encog.ml.data.basic.BasicMLDataSet;
import org.encog.neural.networks.BasicNetwork;
import org.encog.neural.networks.layers.BasicLayer;
import org.encog.neural.networks.training.propagation.resilient.ResilientPropagation;

public class NeuralNetwork {
	
	public NeuralNetwork() {
		
	}

	double[][] data = { { 1.0, 1.0, 1.0 }, { 1.0, 1.0, 2.0 }, { 1.0, 1.0, 3.0 }, { 1.0, 1.0, 4.0 }, { 1.0, 1.0, 5.0 },
			{ 1.0, 1.0, 6.0 }, { 1.0, 1.0, 7.0 }, { 1.0, 1.0, 8.0 }, { 1.0, 2.0, 1.0 }, { 1.0, 2.0, 2.0 },
			{ 1.0, 2.0, 3.0 }, { 1.0, 2.0, 4.0 }, { 1.0, 2.0, 5.0 }, { 1.0, 2.0, 6.0 }, { 1.0, 2.0, 7.0 },
			{ 1.0, 2.0, 8.0 }, { 1.0, 3.0, 1.0 }, { 1.0, 3.0, 2.0 }, { 1.0, 3.0, 3.0 }, { 1.0, 3.0, 4.0 },
			{ 1.0, 3.0, 5.0 }, { 1.0, 3.0, 6.0 }, { 1.0, 3.0, 7.0 }, { 1.0, 3.0, 8.0 }, { 1.0, 4.0, 1.0 },
			{ 1.0, 4.0, 2.0 }, { 1.0, 4.0, 3.0 }, { 1.0, 4.0, 4.0 }, { 1.0, 4.0, 5.0 }, { 1.0, 4.0, 6.0 },
			{ 1.0, 4.0, 7.0 }, { 1.0, 4.0, 8.0 }, { 1.0, 5.0, 1.0 }, { 1.0, 5.0, 2.0 }, { 1.0, 5.0, 3.0 },
			{ 1.0, 5.0, 4.0 }, { 1.0, 5.0, 5.0 }, { 1.0, 5.0, 6.0 }, { 1.0, 5.0, 7.0 }, { 1.0, 5.0, 8.0 },

			{ 2.0, 1.0, 1.0 }, { 2.0, 1.0, 2.0 }, { 2.0, 1.0, 3.0 }, { 2.0, 1.0, 4.0 }, { 2.0, 1.0, 5.0 },
			{ 2.0, 1.0, 6.0 }, { 2.0, 1.0, 7.0 }, { 2.0, 1.0, 8.0 }, { 2.0, 2.0, 1.0 }, { 2.0, 2.0, 2.0 },
			{ 2.0, 2.0, 3.0 }, { 2.0, 2.0, 4.0 }, { 2.0, 2.0, 5.0 }, { 2.0, 2.0, 6.0 }, { 2.0, 2.0, 7.0 },
			{ 2.0, 2.0, 8.0 }, { 2.0, 3.0, 1.0 }, { 2.0, 3.0, 2.0 }, { 2.0, 3.0, 3.0 }, { 2.0, 3.0, 4.0 },
			{ 2.0, 3.0, 5.0 }, { 2.0, 3.0, 6.0 }, { 2.0, 3.0, 7.0 }, { 2.0, 3.0, 8.0 }, { 2.0, 4.0, 1.0 },
			{ 2.0, 4.0, 2.0 }, { 2.0, 4.0, 3.0 }, { 2.0, 4.0, 4.0 }, { 2.0, 4.0, 5.0 }, { 2.0, 4.0, 6.0 },
			{ 2.0, 4.0, 7.0 }, { 2.0, 4.0, 8.0 }, { 2.0, 5.0, 1.0 }, { 2.0, 5.0, 2.0 }, { 2.0, 5.0, 3.0 },
			{ 2.0, 5.0, 4.0 }, { 2.0, 5.0, 5.0 }, { 2.0, 5.0, 6.0 }, { 2.0, 5.0, 7.0 }, { 2.0, 5.0, 8.0 } };

	double[][] expected = { { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 2.0 }, { 2.0 },
			{ 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 1.0 }, { 1.0 },
			{ 1.0 }, { 1.0 }, { 3.0 }, { 3.0 }, { 3.0 }, { 3.0 }, { 2.0 }, { 2.0 }, { 1.0 }, { 1.0 }, { 4.0 }, { 4.0 },
			{ 4.0 }, { 3.0 }, { 3.0 }, { 3.0 }, { 2.0 }, { 2.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 },
			{ 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 2.0 }, { 2.0 },
			{ 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 1.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 1.0 }, { 1.0 },
			{ 1.0 }, { 1.0 }, { 4.0 }, { 4.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 2.0 }, { 2.0 } };
	
	public void trainNetwork() {
		System.out.println("[INFO] Creating neural network");
		BasicNetwork network = new BasicNetwork();
		network.addLayer(new BasicLayer(null, true, 3));
		network.addLayer(new BasicLayer(new ActivationSigmoid(), true, 4));
		network.addLayer(new BasicLayer(new ActivationSigmoid(), true, 4));
		network.addLayer(new BasicLayer(new ActivationSigmoid(), false, 1));
		network.getStructure().finalizeStructure();
		network.reset();

		System.out.println("[INFO] Creating training set");
		MLDataSet trainingSet = new BasicMLDataSet(data, expected);
		
		System.out.println("[INFO] Training the network...");
		ResilientPropagation train = new ResilientPropagation(network, trainingSet);
		
		double minError = 0.09; 
		int epoch = 1;
		System.out.println("Epoch #" + epoch + " Error:" + train.getError());
		do {
			train.iteration();
			System.out.println("Epoch #" + epoch + " Error:" + train.getError());
			epoch++;
		} while (train.getError() < minError);
		train.finishTraining();
		System.out.println("[INFO] training complete in " + epoch + " epochs with error=" + train.getError());
		
		System.out.println("[INFO] Shutting down.");
		Encog.getInstance().shutdown();	
	}
	
	public static void main(String[] args) {
		new NeuralNetwork().trainNetwork();
	}
	
}
