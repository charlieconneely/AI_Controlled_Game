package ie.gmit.sw.ai;

public class HideSelf extends ScavengerAction {
	
	private final double STRENGTH_GAIN = 0;
	
	private GameModel model;
	
	public HideSelf(GameModel model) {
		this.model = model;
	}

	@Override
	public double act(int row, int col) {
		// if coordinate is out of bounds of the grid - return
		if (!super.isInBounds(model, temp_row, temp_col)) {
			return 0;
		}
				
		for (int i = -1; i < 2; i++) {
			for (int j = -1; j < 2; j++) {
				// if current iteration represents a pos which is in bounds and adjacent
				// the characters (non diagonally)
				if (!super.isInBounds(model, temp_row + i, temp_col + j) || (i == 0 && j == 0)
					|| (i != 0 && j != 0)) continue;
				
				// set surrounding blank spaces to hedges 
				if (model.get(temp_row + i, temp_col + j) == ' ') {
					model.set(temp_row + i, temp_col + j, '0');
				}
			}
		}
		
		return STRENGTH_GAIN;
	}

	@Override
	public double act(int row, int col, int temp_row, int temp_col) {
		// if coordinate is out of bounds of the grid - return
		if (!super.isInBounds(model, temp_row, temp_col)) {
			return 0;
		}
				
		for (int i = -1; i < 2; i++) {
			for (int j = -1; j < 2; j++) {
				// if current iteration represents a pos which is in bounds and adjacent
				// the characters (non diagonally)
				if (!super.isInBounds(model, temp_row + i, temp_col + j) || (i == 0 && j == 0)
					|| (i != 0 && j != 0)) continue;
				
				// set surrounding blank spaces to hedges 
				if (model.get(temp_row + i, temp_col + j) == ' ') {
					model.set(temp_row + i, temp_col + j, '0');
				}
			}
		}
		
		return STRENGTH_GAIN;
	}
}
